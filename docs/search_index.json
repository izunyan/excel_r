[
["index.html", "Rで読むExcelファイル（仮） はじめに 本書の特徴 注意事項など", " Rで読むExcelファイル（仮） やわらかクジラ @matsuchiy はじめに 本書を書こうと思ったのは「RとRStudioを使いたい！と思う人がもっと増えればいいのに」という願いからです。使う人が多くなれば、新しい知識に出会いやすくなりますし、仕事でも使う機会が増える可能性があります。 使う人を増やすためにはよい入門書やwebサイトが必要ですが、それは巷にあふれていて無料でアクセスできるものも多いです。 例えば R for Data Science（英語） 1 日本社会心理学会 第5回春の方法論セミナー RとRstudio入門 2 そこで本書では目的を絞って、R（実際はすべてRStudioから使います）を使いたいと思わせる部分を解説することを目指します。Rでどんな便利なことができるか、入門書などでもあまり深く解説されてない部分にフォーカスして紹介します。 本書の特徴 便利なことといってもいろいろあるので、その中でも、つまづくと嫌になってしまうことの多そうな、「手元のexcelファイルを読み込む」所に着目しました。このトピックだけを重点的に解説した本は、筆者の知る範囲では見つけられてないので、本書の最も際立った特徴といえます。また、関連するファイル形式として、csvファイルの読み書きも少しだけ触れています。こちらはつまづくことの多いであろう文字コードについても解説しました。 解析したいデータは山ほどあれど、世の中綺麗なデータばかりとは限りません。たとえば、会社の部署ごとに分かれたデータなど、解析に持っていくまでに大量のファイルを読みこまなければいけない場合もあります。その読み込みの際にいかに楽をできるかという点を意識しています。データさえスムーズに読み込めれば、後はすぐれた解説がネット上でもたくさんあり、やりたいことが可能になる環境が整うからです。 excelファイルをただ読みこむといってもいろんなバリエーションが考えられます。その単なる読みこみプロセスを通じて、Rを使う上で便利な様々な関数や手続きを学ぶこともできるでしょう。戦いの中で自然に強くなった的な効果も見込めるかもしれません。 本書の内容は、githubレポジトリの https://github.com/izunyan/excel_r ですべて公開しています。コードやサンプルデータはこちらのレポジトリをダウンロードしてお試しください。本書の発行後6か月をめどに、html版を読めるように準備予定です。自力でできる方は、Build Bookですぐにでも読むことができます。 想定読者 色々なexcelファイルを読み込んで分析する機会があるのであれば、全くRのことを知らない方から、少しRの経験があるけど複数のファイルを一度に読みこんだことはないというレベルの方ぐらいまでが対象となるでしょう。 本書の到達目標は、Rでのexcelファイルの読み書きレベルをある程度高める、という所に定めました。その先は是非好きなように可視化なり解析なり進めていただければと思います。その一助として、特別付録として可視化のためのggplot2の辞書も紹介しています。 本書の構成 まず1章では、RStudioでファイルを読み書きする際に、最低限知っておいた方がよい知識について解説しておきます。とっつきにくいかもしれませんが、知っておいてよかったと後になって実感する類のものなので、使って慣れていきましょう。 2章から4章は本書のメインであるexcelファイルの読み込みについて解説します。一つのファイルの読み込みから、複数シート、複数ファイルの読み込みまで、様々なシーンに対応しました。また、読みこんだファイルを一つのデータフレームにまとめる方法についても触れています。 5章と6章はexcelファイルの保存についてです。ここでも、一つのファイルの保存から、複数ファイルの保存まで解説します。ここまでの内容が理解できれば、大量ファイルの読み書きにまつわる単純な繰り返し作業とはさよならできるでしょう。 7章は関連知識としてcsvファイルの読み込み、8章はcsvファイルの保存について解説します。windowsユーザーは文字コードの違いによる文字化けという深い闇と対峙することになり、初心者はここで脱落していくことが多いのではないかと思います。そのために、サバイバルスキルとして知っておくことが有用だと思い書いておきました。自分が相当苦しんだので… 執筆環境 本書はbookdownにて執筆しました 3 RおよびRStudio、パッケージのバージョン R version 3.6.1 RStudio version 1.3.1073 readxl version 1.3.1 tidyverse version 1.3.0 注意事項など 本書の内容はすべてwindows環境を想定しています。 この本に書いてある内容は、筆者が学習したことをまとめているものにすぎないため、正常な動作の保証はできません。使用する際は、自己責任でお願いします。 https://r4ds.had.co.nz/↩︎ https://kazutan.github.io/JSSP2018_spring/index.html↩︎ https://bookdown.org/↩︎ "],
["project.html", "1 前提：プロジェクトの設定 1.1 どのフォルダのファイルかの指定 1.2 プロジェクトとは", " 1 前提：プロジェクトの設定 Rの基本的な使い方は他の情報源にゆだねていますが、ここだけは避けて通れないので解説しておきます。 1.1 どのフォルダのファイルかの指定 excelファイルに限らず、ファイルをRに読み込む際は、どのフォルダから読むのか、位置を正確に指定する必要があります。 そこで重要となる概念が、「作業フォルダ」というものです。 コンソールにgetwd()と打って出てくるフォルダが現在の作業フォルダになります。 1.2 プロジェクトとは RStudioの「プロジェクト」とは、作業フォルダにまつわる面倒な設定を意識しないですむ非常に便利な機能です。 ざっくり説明すると、データを加工して解析する際に、1つのフォルダ（サブフォルダも含む）の中に関連するデータやコード、出力をまとめておき、そのフォルダをプロジェクトとして設定するのです。これにより、ファイルの読み書きの際の場所指定をいちいち意識しないで作業できるようになります。 "],
["readoneexcel.html", "2 一つのexcelファイルを読み込む 2.1 最高な機能だよ！パスの自動補完 2.2 列名（変数名）がひどい場合の読み込み 2.3 開始行を指定して読みこむ 2.4 セルを指定して読みこむ", " 2 一つのexcelファイルを読み込む excelファイルを読みこむには、readxlパッケージを使います。 dataフォルダ（data/で表現）に入っている「ペンギン.xlsx」を開きます。 read_xlsx()関数を使います。したがって、以下すべてファイル形式は.xlsxを想定します。 read_xls()やread_excel()もあるので、用途によって使い分けられます。ファイル形式が混ざっている時はread_excel()が有用かもしれません。 library(readxl) df &lt;- read_xlsx(&quot;data/ペンギン.xlsx&quot;) # excelファイルの読み込み df # データの表示 ## # A tibble: 344 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torge~ 39.1 18.7 ## 2 Adelie アデリー~ Torge~ 39.5 17.4 ## 3 Adelie アデリー~ Torge~ 40.3 18 ## 4 Adelie アデリー~ Torge~ NA NA ## 5 Adelie アデリー~ Torge~ 36.7 19.3 ## # ... with 339 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; 上記コードを実行すると、RStudioの右上（デフォルトの配置であれば）のEnvironmentタブに、 df 344 obs. of 9 variables という表示が出ると思います。つまり、344行のデータと9列の変数が入っているデータを、オブジェクトdfとしてRに読みこんだ、ということを示しています。df &lt;-の部分がその作業に該当します。 オブジェクト名であるdfと打つことで、デフォルトでは最初の10行分のデータが表示されます。ここでは紙面の都合で設定を変えているので5つだけにしています。表示された最初の行にも、A tibble: 344 x 9と、行数x列数の情報が出ています。表示しきれなかった行は、with 339 more rowsと省略され、表示しきれなかった列は、body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt;と、名前とが表示されます。 なお、読みこんだファイルの保存については@ref(write_one_excel)章で解説します。 2.1 最高な機能だよ！パスの自動補完 read_xlsx(\"\")と打った後に、\" \"の中にカーソルを置いて、tabキーを押すと、プロジェクトの中身が一覧で表示されるので、選んでいくだけで目的のファイルがキーボードを打つことなしに選べます！ RStudioは\" \"と打てばどこでもこの補完が可能です ただし、R version 4.0で文字コード関連の挙動が変わったみたいで、R 4.0.2ではエラーになりました…（未解決） 上の階層のフォルダに行きたいときは、\" \"の中に../と打てば可能です。その後にtabキーを押せば上の階層のフォルダが選べます。 2.2 列名（変数名）がひどい場合の読み込み read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) ## # A tibble: 344 x 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）`~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## 4 Adelie アデリー Torgersen NA ## 5 Adelie アデリー Torgersen 36.7 ## # ... with 339 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `&lt;U+329B&gt;&lt;U+329A&gt;` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 読めることは読めますが、今後のデータ処理を進めるうえで不安が残ります。 2.2.1 スペースや記号などを自動的に変換してくれる関数できれいに janitorパッケージのclean_names()関数を使って、列名に入り込んでいるスペースや記号などを安全な記号に変換します。 なお、日本語の列名では、引数（ひきすう）にcase = \"old_janitor\"をつけないと読みにくい結果になります。 library(tidyverse) library(janitor) read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% clean_names(case = &quot;old_janitor&quot;) ## # A tibble: 344 x 9 ## sｐｅｃｉｅｓ 種_類 x_島の名前 x_クチバシ_長さ_ｍｍ~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torgersen 39.1 ## 2 Adelie アデリー~ Torgersen 39.5 ## 3 Adelie アデリー~ Torgersen 40.3 ## 4 Adelie アデリー~ Torgersen NA ## 5 Adelie アデリー~ Torgersen 36.7 ## # ... with 339 more rows, and 5 more variables: ## # x_ｸﾁﾊﾞｼ_大きさ_ｍｍ &lt;dbl&gt;, 翼_長さ_mm &lt;dbl&gt;, ## # x_体重_単位はｇ &lt;dbl&gt;, x_u_329b_u_329a &lt;chr&gt;, ## # ２００７_２００９ &lt;dbl&gt; さて、ここで使われている %&gt;% は非常に大事なので解説しておきます。 2.2.1.1 %&gt;% とは？ 「パイプ」と読みます。処理を重ねてコードに書いていきたい際に重宝し、現代のtidyverseを使ったRのコードに欠かせないものです。 たとえば、dfのspecies列を選択する、という処理の select(df, species) は df %&gt;% select(species) と書けます。 %&gt;%の左側にあるものを右側の最初の部分（第1引数）に渡すという働きです。パイプの利点は、いくつもつないで書いていけることです。たとえば、種類別にクチバシの長さの平均値を出したいときには次のようにできます。 df %&gt;% group_by(species) %&gt;% summarise(平均値 = mean(bill_length_mm, na.rm = TRUE)) ## # A tibble: 3 x 2 ## species 平均値 ## &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie 38.8 ## 2 Chinstrap 48.8 ## 3 Gentoo 47.5 以下では%&gt;%を多用していきます。 なお、ショートカットctrl + shit + M（MacだとCmd + Shift + M）で出せます。 2.2.2 全角←→半角を自動で stringiパッケージのstri_trans_nfkc()関数を使って、変数名で全角-半角のばらつきを統一させます。 ここでは、変数名をリネームするのにdplyr 1.0.0で登場したrename_with()関数を使いました。すべての変数に対し、全角文字を含んでいたら半角に直すというコードになります。 library(stringi) read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% rename_with(~stri_trans_nfkc(.), everything()) ## # A tibble: 344 x 9 ## Species `種 類` `※島の名前` `1クチバシ 長さ(mm)`~ `2クチバシ_大きさ(mm)`~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torgersen 39.1 18.7 ## 2 Adelie アデリー~ Torgersen 39.5 17.4 ## 3 Adelie アデリー~ Torgersen 40.3 18 ## 4 Adelie アデリー~ Torgersen NA NA ## 5 Adelie アデリー~ Torgersen 36.7 19.3 ## # ... with 339 more rows, and 4 more variables: ## # `翼:長さ(mm)` &lt;dbl&gt;, `■体重 単位はg` &lt;dbl&gt;, 女男 &lt;chr&gt;, ## # `2007~2009` &lt;dbl&gt; 2.2.3 上記の合わせ技 %&gt;% でつなぎ合わせて1つの実行で合わせてしまうこともできます。 read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% rename_with(~stri_trans_nfkc(.), everything()) %&gt;% clean_names(case = &quot;old_janitor&quot;) ## # A tibble: 344 x 9 ## species 種_類 x_島の名前 x1クチバシ_長さ_mm~ x2クチバシ_大きさ_mm~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torgersen 39.1 18.7 ## 2 Adelie アデリー~ Torgersen 39.5 17.4 ## 3 Adelie アデリー~ Torgersen 40.3 18 ## 4 Adelie アデリー~ Torgersen NA NA ## 5 Adelie アデリー~ Torgersen 36.7 19.3 ## # ... with 339 more rows, and 4 more variables: ## # 翼_長さ_mm &lt;dbl&gt;, x_体重_単位はg &lt;dbl&gt;, 女男 &lt;chr&gt;, ## # x2007_2009 &lt;dbl&gt; 2.3 開始行を指定して読みこむ 理想的なデータは1行目に列名が入力されている形ですが、最初の数行が空だったり、文字の説明が入っていたりすることも多いです。そうした場合は、以下のような読み込み結果になります。 read_xlsx(&quot;data/ペンギン（3行空き）.xlsx&quot;) ## # A tibble: 346 x 9 ## ...1 ここに説明とか書いてあるファイ~ ...3 ...4 ...5 ...6 ...7 ...8 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 spec~ island bill~ bill~ flip~ body~ sex year ## 3 Adel~ Torgersen 39.1 18.7 181 3750 male 2007 ## 4 Adel~ Torgersen 39.5 17.4 186 3800 fema~ 2007 ## 5 Adel~ Torgersen 40.3 18 195 3250 fema~ 2007 ## # ... with 341 more rows, and 1 more variable: ...9 &lt;chr&gt; 列名が、セルに内容が入っている行から始まり、他の列名が...1, ...3といったものになりました。 これを、指定した行から読み込むには、引数skip =にとばしたい行の数を指定します。 read_xlsx(&quot;data/ペンギン（3行空き）.xlsx&quot;, skip = 3) ## # A tibble: 344 x 9 ## species island bill_length_mm bill_depth_mm flipper_length_~ ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie Torge~ 39.1 18.7 181 ## 2 Adelie Torge~ 39.5 17.4 186 ## 3 Adelie Torge~ 40.3 18 195 ## 4 Adelie Torge~ NA NA NA ## 5 Adelie Torge~ 36.7 19.3 193 ## # ... with 339 more rows, and 4 more variables: ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt;, 種類 &lt;chr&gt; このように、ちゃんと読むこむことができました。 2.4 セルを指定して読みこむ 引数range =にセル範囲を指定すれば、そのセル範囲だけを読みこむこともできます。 read_xlsx(&quot;data/ペンギン.xlsx&quot;, range = &quot;A1:D5&quot;) ## # A tibble: 4 x 4 ## species 種類 island bill_length_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## 4 Adelie アデリー Torgersen NA 他にも、cell_cols =で読みたい列の指定、cell_rows =で読みたい行の指定も行えます。 詳細は、?readxlと打ち込んでヘルプを見るか、readxlのwebサイト 4を参照してください。 https://readxl.tidyverse.org/↩︎ "],
["シートを指定して読みこむ.html", "3 シートを指定して読みこむ 3.1 シート名の確認 3.2 普通の読み込み 3.3 シートを指定した読み込み 3.4 すべてのシートから読み込み", " 3 シートを指定して読みこむ 3.1 シート名の確認 複雑なexcelファイルとなると、たくさんのシートが含まれていて、その全容を知るのも一苦労です。Rでは、readxlパッケージのexcel_sheets()関数でシート名の一覧を簡単に取得できます。 excel_sheets(&quot;data/ペンギン（シート別）.xlsx&quot;) ## [1] &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; 3.2 普通の読み込み シートが分かれているexcelファイルをそのまま読みこんでみます。 read_xlsx(&quot;data/ペンギン（シート別）.xlsx&quot;) ## # A tibble: 152 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torge~ 39.1 18.7 ## 2 Adelie アデリー~ Torge~ 39.5 17.4 ## 3 Adelie アデリー~ Torge~ 40.3 18 ## 4 Adelie アデリー~ Torge~ NA NA ## 5 Adelie アデリー~ Torge~ 36.7 19.3 ## # ... with 147 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; デフォルトでは一番最初のシートのデータが読みこまれます。ここでは、シート「アデリー」が読み込まれました。 3.3 シートを指定した読み込み 引数のsheet =にシート名を指定することで読み込めます。 read_excel(&quot;data/ペンギン（シート別）.xlsx&quot;, sheet = &quot;ジェンツー&quot; ) ## # A tibble: 124 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツ~ Biscoe 46.1 13.2 ## 2 Gentoo ジェンツ~ Biscoe 50 16.3 ## 3 Gentoo ジェンツ~ Biscoe 48.7 14.1 ## 4 Gentoo ジェンツ~ Biscoe 50 15.2 ## 5 Gentoo ジェンツ~ Biscoe 47.6 14.5 ## # ... with 119 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; 3.4 すべてのシートから読み込み ここで一気にレベルが上がりますが、これこそがRを使ってexcelファイルを読みこむ便利な部分なので、その魅力をみていきましょう。 path_name &lt;- &quot;data/ペンギン（シート別）.xlsx&quot; # データのパスを格納 # シート名を取得しそれぞれから読み込んでリストにまとめる df_list &lt;- excel_sheets(path_name) %&gt;% set_names() %&gt;% # 名前付きベクトルにする map(read_excel, path = path_name) df_list # 作成したリストの表示 ## $アデリー ## # A tibble: 152 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torge~ 39.1 18.7 ## 2 Adelie アデリー~ Torge~ 39.5 17.4 ## 3 Adelie アデリー~ Torge~ 40.3 18 ## 4 Adelie アデリー~ Torge~ NA NA ## 5 Adelie アデリー~ Torge~ 36.7 19.3 ## # ... with 147 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ジェンツー ## # A tibble: 124 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツ~ Biscoe 46.1 13.2 ## 2 Gentoo ジェンツ~ Biscoe 50 16.3 ## 3 Gentoo ジェンツ~ Biscoe 48.7 14.1 ## 4 Gentoo ジェンツ~ Biscoe 50 15.2 ## 5 Gentoo ジェンツ~ Biscoe 47.6 14.5 ## # ... with 119 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ヒゲ ## # A tibble: 68 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chinst~ ヒゲ Dream 46.5 17.9 ## 2 Chinst~ ヒゲ Dream 50 19.5 ## 3 Chinst~ ヒゲ Dream 51.3 19.2 ## 4 Chinst~ ヒゲ Dream 45.4 18.7 ## 5 Chinst~ ヒゲ Dream 52.7 19.8 ## # ... with 63 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; それぞれのexcelシートから読みこまれた3つのデータ（アデリー、ジェンツー、ヒゲ）はデータフレームとして、df_listにリストとしてまとめて格納されています。リストは最初は理解が難しいですが、慣れるとなんでもリストにしたくなるくらい便利なものです。リストの中身を個別に取り出してみてみましょう df_list$ジェンツー ## # A tibble: 124 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツ~ Biscoe 46.1 13.2 ## 2 Gentoo ジェンツ~ Biscoe 50 16.3 ## 3 Gentoo ジェンツ~ Biscoe 48.7 14.1 ## 4 Gentoo ジェンツ~ Biscoe 50 15.2 ## 5 Gentoo ジェンツ~ Biscoe 47.6 14.5 ## # ... with 119 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; これは、df_listというリストの中の、ジェンツーという要素（ここではデータフレーム）を取り出す、というコードです。$が「（左側にくるオブジェクト）の中の」という意味を表しています。自分でコードを打つと、df_list$と打った時点で、中の要素の一覧が表示されるはずなので、そこからクリックして選ぶこともできます。 それでは、先ほど実行した読み込みコードの解説をします。 path_name &lt;- &quot;data/ペンギン（シート別）.xlsx&quot; これは、単にファイルの場所をpath_nameに格納しただけです。自分のデータで試してみたいときは、基本的にここのパス名を変えるだけで実行できるはずです。 df_list &lt;- excel_sheets(path_name) %&gt;% set_names() %&gt;% map(read_excel, path = path_name) excel_sheets()は上で実行したのと同じです。実行結果はベクトルとして保存されています。set_names()は、ベクトルを名前付きベクトルにする働きをします。なので、ここでできるのは、 excel_sheets(path_name) %&gt;% set_names() ## アデリー ジェンツー ヒゲ ## &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; です。それぞれについてpurrrパッケージのmap()関数を使ってread_excel()を1つ1つのシート（ここでは作成した名前付きベクトルの要素）に適用していき、データを読み込みデータフレームにし、1つのリストにまとめるという作業をします。 3.4.1 一つのデータフレームにする bind_rows()は、データフレームを縦に連結します。データフレームがリストになったものが引数にくると、それらをすべて縦につなげてくれます。引数.id =で、リストの要素名を変数の値として入れることができるので、どのデータフレームから来たのか識別することが可能になります。ここではgroupという名前にしています。 df_all &lt;- bind_rows(df_list, .id = &quot;group&quot;) 3.4.1.1 作成したデータフレームの確認 dplyrパッケージのslice()関数を使って、最初の3行と最後の3行だけを表示してどんなものができたか確認します。1:3は1行目から3行目、(n()-2):n()は、列数（ただし現在のgroup内）を表すn()とそれから-2行した(n()-2)で表されています。 df_all %&gt;% slice(1:3, (n()-2):n()) ## # A tibble: 6 x 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 アデリー~ Adelie アデリー~ Torge~ 39.1 18.7 ## 2 アデリー~ Adelie アデリー~ Torge~ 39.5 17.4 ## 3 アデリー~ Adelie アデリー~ Torge~ 40.3 18 ## 4 ヒゲ Chinst~ ヒゲ Dream 49.6 18.2 ## 5 ヒゲ Chinst~ ヒゲ Dream 50.8 19 ## 6 ヒゲ Chinst~ ヒゲ Dream 50.2 18.7 ## # ... with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; それぞれ、別々に出したほうが簡単かもしれません。それぞれslice_head(), slice_tail()関数を使って、引数n =に表示したい行数を指定することで、最初および最後の数行を取得できます。 # 最初の3行 df_all %&gt;% slice_head(n = 3) ## # A tibble: 3 x 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 アデリー~ Adelie アデリー~ Torge~ 39.1 18.7 ## 2 アデリー~ Adelie アデリー~ Torge~ 39.5 17.4 ## 3 アデリー~ Adelie アデリー~ Torge~ 40.3 18 ## # ... with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; # 最後の3行 df_all %&gt;% slice_tail(n = 3) ## # A tibble: 3 x 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ヒゲ Chinst~ ヒゲ Dream 49.6 18.2 ## 2 ヒゲ Chinst~ ヒゲ Dream 50.8 19 ## 3 ヒゲ Chinst~ ヒゲ Dream 50.2 18.7 ## # ... with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; "],
["readseveralexcel.html", "4 複数のexcelファイルを読み込む 4.1 読み込むファイル名の一覧のオブジェクト作成 4.2 ファイルを一括で読み込む", " 4 複数のexcelファイルを読み込む それでは、いよいよRの恩恵を深く実感できる部分に入ります。読みこみたいexcelファイルが大量にある場合です。これも実務上よく遭遇します。 ただし、ここでは読みこむファイルの構造がすべて同様の場合に限ります。残念ながら、それがかなわない状況現実ではたくさん遭遇します。いつか本書の応用編を書くことがあったら、そちらで解説することとして、今回は構造が単純な場合に限って解説します。 4.1 読み込むファイル名の一覧のオブジェクト作成 まず、読みこみたいファイルが格納されているフォルダのファイル名、およびパス名の一覧を取得します。 files &lt;- list.files(path = &quot;data/複数/&quot;, full.names = TRUE) files ## [1] &quot;data/複数/アデリー.xlsx&quot; &quot;data/複数/ジェンツー.xlsx&quot; ## [3] &quot;data/複数/ヒゲ.xlsx&quot; list.files()関数は、path =で指定したフォルダ内の情報を取得します。full.names = TRUEでパスも含めます。これをつけないと、ファイル名と拡張子だけの取得になります。 4.2 ファイルを一括で読み込む ldata &lt;- map(files, ~read_xlsx(.)) ここでできたldataは、3.4で作成したdf_listと同じ構造です。違いはそれぞれのデータフレームの要素名（アデリー、ジェンツー、ヒゲ）が入っていない点です。これは不便なので、以下で要素名を改めてつけます。 4.2.1 ファイル名抽出 先ほど作成したfilesから、ファイル名部分だけに加工します。str_replace()は、stringrパッケージの、文字の置換をする関数です。ここでは、拡張子とパス名をそれぞれ\"\"、つまり空白に置換しています。 file_name &lt;- str_replace(files, &quot;.xlsx&quot;, &quot;&quot;) %&gt;% str_replace(&quot;data/複数/&quot;, &quot;&quot;) file_name ## [1] &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; 4.2.2 リストの要素名にファイル名を付与 ldata &lt;- set_names(ldata, file_name) ldata ## $アデリー ## # A tibble: 152 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torge~ 39.1 18.7 ## 2 Adelie アデリー~ Torge~ 39.5 17.4 ## 3 Adelie アデリー~ Torge~ 40.3 18 ## 4 Adelie アデリー~ Torge~ NA NA ## 5 Adelie アデリー~ Torge~ 36.7 19.3 ## # ... with 147 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ジェンツー ## # A tibble: 124 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツ~ Biscoe 46.1 13.2 ## 2 Gentoo ジェンツ~ Biscoe 50 16.3 ## 3 Gentoo ジェンツ~ Biscoe 48.7 14.1 ## 4 Gentoo ジェンツ~ Biscoe 50 15.2 ## 5 Gentoo ジェンツ~ Biscoe 47.6 14.5 ## # ... with 119 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ヒゲ ## # A tibble: 68 x 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chinst~ ヒゲ Dream 46.5 17.9 ## 2 Chinst~ ヒゲ Dream 50 19.5 ## 3 Chinst~ ヒゲ Dream 51.3 19.2 ## 4 Chinst~ ヒゲ Dream 45.4 18.7 ## 5 Chinst~ ヒゲ Dream 52.7 19.8 ## # ... with 63 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; これらを1つのデータフレームにまとめるには、 3.4.1と同じ手順でできます。 bind_rows(ldata, .id = &quot;group&quot;) "],
["writeoneexcel.html", "5 一つのexcelファイルを保存する 5.1 カテゴリ別平均値の作成 5.2 excelファイルの保存", " 5 一つのexcelファイルを保存する writexlパッケージのwrite_xlsx()関数で、直接excelファイルとして出力ができます。ここでは、新しく作成したデータフレームをexcelファイルとして保存してみます。 5.1 カテゴリ別平均値の作成 クチバシの長さと大きさを表す変数である、bill_length_mm、bill_depth_mmについて、平均値と欠損を抜いたn（ペンギン数）を種類別に計算します。 group_by()でカテゴリ別にしたい変数を指定し、summarise()で平均値とnを計算するコードが以下になります。 df_group_mean &lt;- df %&gt;% group_by(種類) %&gt;% summarise(across( c(bill_length_mm, bill_depth_mm), # ここに変数 list(m = ~mean(., na.rm = TRUE), n = ~sum(!is.na(.)))) ) df_group_mean ## # A tibble: 3 x 5 ## 種類 bill_length_mm_m bill_length_mm_n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 アデリー~ 38.8 151 18.3 ## 2 ジェンツ~ 47.5 123 15.0 ## 3 ヒゲ 48.8 68 18.4 ## # ... with 1 more variable: bill_depth_mm_n &lt;int&gt; 5.2 excelファイルの保存 library(writexl) write_xlsx(df_group_mean, &quot;out/df_group_mean.xlsx&quot;) out/の部分が出力先のフォルダを示しています。 5.2.1 ファイル名に自動で本日の日付を入れる write_xlsx(df_group_mean, str_c(&quot;out/df_group_mean&quot;, &quot;_&quot;, lubridate::today(), &quot;.xlsx&quot;)) "],
["writeseveralexcel.html", "6 複数のファイルを一度に保存する 6.1 データフレームをカテゴリ別に分割する 6.2 個別でExcelファイルに保存する 6.3 一ファイルの複数シートに保存する", " 6 複数のファイルを一度に保存する これが活躍する場面としては、たとえばカテゴリ別（例：ペンギンの種類別、会社の部署別など）に集計した要約値をそのカテゴリ別に個々のexcelファイルにするといった状況が思いつきますので、それをやってみます。 6.1 データフレームをカテゴリ別に分割する split()関数を使うことで、カテゴリ別にデータフレームを分割し、リストにまとめた結果を作成できます。データは5.1で作成したdf_group_meanを使います。 分割に使う変数は、df_group_mean$speciesのように、データフレーム名の後に$をつけてその後に指定します。この変数の中身が、そのままリストの要素名になるので、後の処理がとても楽になります。 df_gmean_list &lt;- split(df_group_mean, df_group_mean$種類) df_gmean_list ## $アデリー ## # A tibble: 1 x 5 ## 種類 bill_length_mm_m bill_length_mm_n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 アデリー~ 38.8 151 18.3 ## # ... with 1 more variable: bill_depth_mm_n &lt;int&gt; ## ## $ジェンツー ## # A tibble: 1 x 5 ## 種類 bill_length_mm_m bill_length_mm_n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 ジェンツ~ 47.5 123 15.0 ## # ... with 1 more variable: bill_depth_mm_n &lt;int&gt; ## ## $ヒゲ ## # A tibble: 1 x 5 ## 種類 bill_length_mm_m bill_length_mm_n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 ヒゲ 48.8 68 18.4 ## # ... with 1 more variable: bill_depth_mm_n &lt;int&gt; 6.2 個別でExcelファイルに保存する purrrパッケージのimap()関数を使って、リスト内の各データフレームに、それぞれの要素名をファイル名として、excelファイルに出力します。 ここでは、リスト内の各要素を示すのが.x、要素名（位置）に当たるのは.yです。次々に代わるファイル名を作るのに、str_c()関数で文字列を結合しています。 imap(df_gmean_list, ~write_xlsx(.x, path = str_c(&quot;out/&quot;, .y , &quot;.xlsx&quot;))) 6.2.1 サンプルデータセット作成コード ちなみにdata/複数/フォルダにあるサンプルデータセットは以下のコードで作りました。 imap(df_list, ~write_xlsx(.x, path = str_c(&quot;data/複数/&quot;,.y , &quot;.xlsx&quot;))) 6.3 一ファイルの複数シートに保存する 6.1で作成した、ペンギンの種類別クチバシの長さと大きさ平均値のデータを、個別のファイルでなく、一ファイルの複数シートに保存したいときは、とてもシンプルなコードで可能になります。 要素名のついたデータフレームのリストが作成されていれば、それを単純にwrite_xlsx()で出力するだけで完成します。 write_xlsx(df_gmean_list, &quot;data/平均値（複数シート）.xlsx&quot;) "],
["readonecsv.html", "7 csvファイルの読み込み 7.1 一つのcsvファイルを読み込む", " 7 csvファイルの読み込み windows環境で過ごしている日本語を使うRユーザーにおいては、csvファイルを扱う際に文字コードの違いという深い闇（いわゆる文字化け）に遭遇することが少なくありません。 出会う可能性が高い文字コードには、大きくcp932（Shift-JIS）とUTF-8という形式があり、一般的に業務で読みこもうとするファイルは前者であることが多いことを知っておくと役に立ちます。 7.1 一つのcsvファイルを読み込む csvファイルを読みこむには、readrパッケージのread_csv()関数を使います。tidyverseを読み込んだら一緒に読み込まれます。 readrでは基本的にutf8の読み書きが想定されています。RStudioのメニューで以下の部分ををUTF-8に変えておかないと、色々つらい思いをします。 Tools &gt; Global Options &gt; Code &gt; Saving &gt; Default text encoding: Tools &gt; Project Options &gt; Code Editing &gt; text encoding: data &gt; csvフォルダ（ここでは&gt;は階層関係を示し、コードではdata/csv/で表現）に入っている「ペンギン（ひどい列名）ver_utf8.csv」を開きます。 ㊛㊚列のみ、環境依存文字のため、csvにする時点で文字化けています… 7.1.1 UTF-8でエンコードされたcsvファイル df_csv &lt;- read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;) df_csv ## # A tibble: 344 x 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）`~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## 4 Adelie アデリー Torgersen NA ## 5 Adelie アデリー Torgersen 36.7 ## # ... with 339 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `&lt;U+329B&gt;&lt;U+329A&gt;` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 7.1.2 【文字化けの例】Shift-JISでエンコードされたcsvファイル 正確にはShift-JISの拡張版であるcp932でエンコードされたファイルです。変数名も文字化けして読みこみ自体できなくなるので、clean_names()で読める形式に変換しています。 read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot;) %&gt;% clean_names(case = &quot;old_janitor&quot;) %&gt;% select(1:3) # 紙面の都合で最初の3つの変数に限定 ## # A tibble: 344 x 3 ## s_u_0082_u_0090_u_008~ x_u_008e_ed_u_008~ x_u_0081_u_00a6_u_00~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Adelie &quot;\\x83A\\x83f\\x83\\x~ Torgersen ## 2 Adelie &quot;\\x83A\\x83f\\x83\\x~ Torgersen ## 3 Adelie &quot;\\x83A\\x83f\\x83\\x~ Torgersen ## 4 Adelie &quot;\\x83A\\x83f\\x83\\x~ Torgersen ## 5 Adelie &quot;\\x83A\\x83f\\x83\\x~ Torgersen ## # ... with 339 more rows 日本語の変数名と、2列目の日本語の値が文字化けします。 7.1.3 Shift-JISでエンコードされたcsvファイル これを読むためには，引数locale = locale(encoding = )でShift-JISのファイルであることを指定する必要があります。 read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot; , locale = locale(encoding = &quot;cp932&quot;)) ## # A tibble: 344 x 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）`~ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## 4 Adelie アデリー Torgersen NA ## 5 Adelie アデリー Torgersen 36.7 ## # ... with 339 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `??` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 7.1.4 read.csvを使う場合 従来のcsvを読む関数read.csv()を使えば，デフォルトでShift-JISのファイルは読めます。 read.csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot;) %&gt;% as_tibble() %&gt;% # データフレームをtibble型にし見やすい出力に head() ## # A tibble: 6 x 9 ## Sｐｅｃｉｅｓ 種.類 X.島の名前 X.クチバシ.長さ.ｍｍ.~ ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Adelie アデリー~ Torgersen 39.1 ## 2 Adelie アデリー~ Torgersen 39.5 ## 3 Adelie アデリー~ Torgersen 40.3 ## 4 Adelie アデリー~ Torgersen NA ## 5 Adelie アデリー~ Torgersen 36.7 ## 6 Adelie アデリー~ Torgersen 39.3 ## # ... with 5 more variables: X.ｸﾁﾊﾞｼ.大きさ.ｍｍ. &lt;dbl&gt;, ## # 翼.長さ.mm. &lt;int&gt;, X.体重.単位はｇ &lt;int&gt;, X.. &lt;fct&gt;, ## # ２００７.２００９ &lt;int&gt; UTF-8を読む場合は引数encoding =で指定します。 read.csv(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;, encoding = &quot;UTF-8&quot;) %&gt;% as_tibble() %&gt;% head() ## # A tibble: 6 x 12 ## Sｐｅｃｉｅｓ.種.類..島の~ X.クチバシ.長さ.ｍｍ...~ X.体重.単位はｇ..U.32~ ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 Adelie アデリー Torgersen ## 2 Adelie アデリー Torgersen ## 3 Adelie アデリー Torgersen ## 4 Adelie アデリー Torgersen ## 5 Adelie アデリー Torgersen ## 6 Adelie アデリー Torgersen ## # ... with 9 more variables: ２００７.２００９.Adelie &lt;dbl&gt;, ## # アデリー &lt;dbl&gt;, Torgersen &lt;int&gt;, X39.1 &lt;int&gt;, X18.7 &lt;fct&gt;, ## # X181 &lt;int&gt;, X3750 &lt;lgl&gt;, male &lt;lgl&gt;, X2007 &lt;lgl&gt; "],
["writeonecsv.html", "8 csvファイルの保存 8.1 write_csv()を使う 8.2 write.csv()を使う", " 8 csvファイルの保存 csvファイルを保存するには、readrパッケージのwrite_csv()関数を使います。 ただし、出力されたcsvファイルをExcelで開くとたぶん文字化けします。LibreOfficeのCalcであれば、最初にダイアログボックスが開いて読む文字コードを選べます。 8.1 write_csv()を使う 先ほど読みこんだdf_csvと、保存先を\"\"中に指定します。 write_csv(df_csv, &quot;out/df_csv_utf8.csv&quot;) 8.1.1 Excelで開いても読めるように Excelで開いても読める、BOM（byte order mark, バイトオーダーマーク）付きファイルとして出力する関数です。 write_excel_csv(df_csv, &quot;out/df_csv_utf8_forxl.csv&quot;) 8.2 write.csv()を使う 書き込みが遅いですが、文字化け回避の最終手段として、なぜかうまくいく時があるので、write.csv()も役に立ちます。Rでデフォルトの文字エンコードがcp932で、そちらを採用するからと思われます。 write.csv(df_csv, &quot;out/df_csv_cp932.csv&quot;) "],
["あとがき.html", "あとがき", " あとがき これから書きます "]
]
