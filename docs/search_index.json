[["index.html", "Rで読むExcelファイル はじめに 本書の特徴 注意事項など 特別付録について", " Rで読むExcelファイル やわらかクジラ はじめに 本webサイトは，技術書典9にて頒布したRで読むExcelファイルのオンラインバージョン こちらは随時updateされていく予定 csvファイルの読み込み部分について，R4.2に対応させました（2022/05/03） 本書『Rで読むExcelファイル』を書こうと思ったのは「RとRStudioを使いたい！と思う人がもっと増えればいいのに」という願いからです。使う人が多くなれば、新しい知識に出会いやすくなりますし、仕事でも使う機会が増える可能性があります。 使う人を増やすためにはよい入門書やwebサイトが必要ですが、それは巷にあふれていて無料でアクセスできるものも多いです。 例えば R for Data Science（英語） 1 日本社会心理学会 第5回春の方法論セミナー RとRstudio入門 2 そこで本書では目的を絞って、R（実際はすべてRStudioから使います）を使いたいと思わせる部分を解説することを目指します。Rでどんな便利なことができるか、入門書などでもあまり深く解説されてない部分にフォーカスして紹介します。 本書の特徴 便利なことといってもいろいろあるので、その中でも、つまづくと嫌になってしまうことの多そうな、「手元のExcelファイルを読み込む」所に着目しました。このトピックだけをRのいわゆるモダンな方法を使って重点的に解説した資料は、筆者の知る範囲では見つけられてないので、本書の最も際立った特徴といえます。また、関連するファイル形式として、csvファイルの読み書きも少しだけ触れています。こちらはつまづくことの多いであろう文字コードについても解説しました。 解析したいデータが、綺麗な一つにまとまったデータばかりとは限りません。たとえば、会社の部署ごとに分かれたデータなど、解析に持っていくまでに大量のファイルを読みこまなければいけない場合もあります。その読み込みの際にいかに楽をできるかという点を意識しています。データさえスムーズに読み込めれば、後はすぐれた解説がネット上でもたくさんあり、やりたいことが可能になる環境が整うからです。 Excelファイルをただ読みこむといってもいろんなバリエーションが考えられます。その単なる読みこみプロセスを通じて、Rを使う上で便利な関数や手続きを学ぶこともできるでしょう。戦いの中で自然に強くなった的な効果も見込めるかもしれません。 本書の内容は、githubレポジトリの https://github.com/izunyan/excel_r ですべて公開しています。コードやサンプルデータはこちらのレポジトリをダウンロードしてお試しください。pdf版が読みたい方は、以下のページで無料で入手可能です。自力でできる方は、Build Bookでも作成できます。 技術書典マーケットの販売ページ https://techbookfest.org/product/4794168259903488?productVariantID=5913872206659584 想定読者 色々なExcelファイルを読み込んで分析する機会があるのであれば、全くRのことを知らない方から、少しRの経験があるけど複数のファイルを一度に読みこんだことはないというレベルの方ぐらいまでが対象となるでしょう。 本書の到達目標は、RでのExcelファイルの読み書きレベルをある程度高める、という所に定めました。その先は是非好きなように可視化なり解析なり進めていただければと思います。とはいえ、そこでお好きなように！と言われても路頭に迷う方もいるかもしれないので、データの内容把握に関して、要約値や欠損値の一覧、簡単な可視化、相関の一覧についても少しだけ解説しました。その一助として、特別付録として本書と並行してまとめた、可視化のためのggplot2の辞書（特別付録について参照）もあります。 なお、データをきれいにする過程（例：前処理、データクリーニング、データクレンジング、データラングリングなど）については多くの説明を要するため、本書の範囲を超えます。これはまた別機会にまとめられたらなと思っています。 本書の構成 まず1章では、RStudioでファイルを読み書きする際に、最低限知っておいた方がよい知識について解説しておきます。とっつきにくいかもしれませんが、知っておいてよかったと後になって実感する類のものなので、使って慣れていきましょう。 2章は本書のメインであるExcelファイルの読み込みについて解説します。一つのファイルの読み込みから、複数シート、複数ファイルの読み込みまで、様々なシーンに対応しました。また、読みこんだファイルを一つのデータフレーム3にまとめる方法についても触れています。 3章はExcelファイルの保存についてです。ここでも、一つのファイルの保存から、複数ファイルの保存まで解説します。ここまでの内容が理解できれば、大量ファイルの読み書きにまつわる単純な繰り返し作業とはさよならできるでしょう。 4章は関連知識としてcsvファイルの読み込みと保存について解説します。windowsユーザーは文字コードの違いによる文字化けというつらみと対峙することになり、初学者はここで脱落していくことが多いのではないかと思います。そのために、サバイバルスキルとして知っておくことが有用だと思い書いておきました。自分が相当苦しんだので… 5章は、読み込んだファイルの特徴をざっと把握する方法について解説しました。ここまでやれば、（きれいなデータであれば！）きっとデータ解析に入っていくことができるでしょう。 執筆環境 本書はbookdownにて執筆しました 4 RおよびRStudio、パッケージのバージョン（オンライン版） RStudioだけなぜか表示されないので手動で… RStudio 2022.02.1+461 “Prairie Trillium” ## # A tibble: 4 × 2 ## ind values ## &lt;chr&gt; &lt;chr&gt; ## 1 version R version 4.2.0 (2022-04-22 ucrt) ## 2 os Windows 10 x64 (build 19043) ## 3 system x86_64, mingw32 ## 4 date 2022-05-13 ## # A tibble: 4 × 2 ## package loadedversion ## &lt;chr&gt; &lt;chr&gt; ## 1 bookdown 0.26 ## 2 readxl 1.4.0 ## 3 tidyverse 1.3.1 ## 4 writexl 1.4.0 注意事項など 本書の内容はすべてwindows環境を想定しています。 この本に書いてある内容は、筆者が学習したことをまとめているものにすぎないため、正常な動作の保証はできません。使用する際は、自己責任でお願いします。 特別付録について 本書の執筆に先駆けて、順序が違う気がしますがまず付録の作成からはじめました。特別付録は以下でアクセス可能なオンライン付録となります。 ggplot2の辞書 https://izunyan.github.io/practice_ggplot2/ Twitterで応援してもらったら項目が増えていく仕様にしているので、もっと読みたい方はこちらのツイートに何らかのレスポンスください！ https://r4ds.had.co.nz/↩︎ https://kazutan.github.io/JSSP2018_spring/index.html↩︎ 変数（列）とオブザベーション（行）が碁盤の目のようになった集まりの形のデータ。Excelであれば通常1行目に列名が入り、2行目以降が個別のデータを表す。データ解析において便利で分かりやすいため、本書ではデータフレームの形で説明していく↩︎ https://bookdown.org/↩︎ "],["project.html", "1 前提：プロジェクトの設定 1.1 どのフォルダのファイルかの指定 1.2 プロジェクトとは", " 1 前提：プロジェクトの設定 Rの基本的な使い方は他の情報源にゆだねていますが、ここだけは避けて通れないので解説しておきます。 1.1 どのフォルダのファイルかの指定 Excelファイルに限らず、ファイルをRに読み込む際は、どのフォルダから読むのか、位置を正確に指定する必要があります。 そこで重要となる概念が、「作業フォルダ」というものです。 コンソールにgetwd()と打って出てくるフォルダが現在の作業フォルダになります。 1.2 プロジェクトとは RStudioの「プロジェクト」とは、作業フォルダにまつわる面倒な設定を意識しないですむ非常に便利な機能です。RStudioを開いて右上のところに設定アイコンがあります（Figure1.1）。 Figure 1.1: プロジェクトの場所 ざっくり説明すると、データを加工して解析する際に、1つのフォルダ（サブフォルダも含む）の中に関連するデータやコード、出力をまとめておき、そのフォルダをプロジェクトとして設定するのです。これにより、ファイルの読み書きの際の場所指定をいちいち意識しないで作業できるようになります。 したがって、本書に出てくる内容をご自身のPC上で再現するには、Githubレポジトリhttps://github.com/izunyan/excel_r をダウンロードして、その中にあるexcel_r.Rprojファイルを実行すればお手軽です。 詳しくは、先述のR for Data Scienceでの解説が参考になります。5 https://r4ds.had.co.nz/workflow-projects.html↩︎ "],["readexcel.html", "2 Excelファイルの読み込み 2.1 一つのExcelファイルを読み込む 2.2 シートを指定して読み込む 2.3 複数のExcelファイルを読み込む", " 2 Excelファイルの読み込み 2.1 一つのExcelファイルを読み込む 2.1.1 ファイルの準備と読み込み ExcelファイルをRに読み込むには、readxlパッケージが便利です。6セクション1.2で述べた通り、ここからは、githubレポジトリのhttps://github.com/izunyan/excel_r をダウンロードしてプロジェクトを開いて進めてみてください。dataフォルダ（data/で表現）に入っている「ペンギン.xlsx」7を読み込んでみましょう。 読み込みにはread_xlsx()関数を使います。したがって、以下すべてExcelファイル形式は.xlsxを想定します。read_xls()やread_excel()という関数もあるので、ファイル形式によって使い分けられます。ファイル形式が混ざっている時はread_excel()が有用かもしれません。 library(readxl) df &lt;- read_xlsx(&quot;data/ペンギン.xlsx&quot;) # Excelファイルの読み込み df # データの表示 ## # A tibble: 344 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 341 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; 上記コードを実行すると、RStudioの右上（デフォルトの配置であれば）のEnvironmentタブに、 df 344 obs. of 9 variables という表示が出ると思います。つまり、344行のデータと9列の変数が入っているデータを、dfという名前のもの（オブジェクト）としてRに読みこんだ、ということを示しています。df &lt;-の部分がその作業に該当します。&lt;-の右側の内容を左側のオブジェクトに格納するという意味です。ここで読み込まれた形がデータフレーム（はじめに&gt;本書の構成の注参照）です。 オブジェクト名であるdfと打つことで、デフォルトでは最初の10行分のデータが表示されます。ここでは紙面の都合で設定を変えているので3行だけにしています。表示された最初の行にも、A tibble: 344 x 9と、行数x列数の情報が出ています。表示しきれなかった行は、with 341 more rowsと省略され、表示しきれなかった列は、flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt;と、名前&lt;データの型名&gt;が表示されます。なお、読みこんだファイルの保存については3.1章で解説します。 2.1.1.1 最高な機能だよ！パスの自動補完 read_xlsx(\"\")と打った後に、\" \"の中にカーソルを置いて、tabキーを押すと、プロジェクトの中身が一覧で表示されるので、選んでいくだけで目的のファイルがキーボードを打つことなしに選べます！RStudioは\" \"と打てばどこでもこの補完が可能です。8 上の階層のフォルダに行きたいときは、\" \"の中に../と打てば可能です。その後にtabキーを押せば上の階層のフォルダが選べます。 2.1.2 列名（変数名）がひどい場合の読み込み read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `㊛㊚` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 読めることは読めますが、今後のデータ処理を進めるうえで不安が残ります。 2.1.2.1 スペースや記号などを自動的に変換してくれる関数できれいに janitorパッケージのclean_names()関数を使って、列名に入り込んでいるスペースや記号などを安全な記号に変換します。 なお、日本語の列名では、clean_names()関数にcase = \"old_janitor\"をつけないと読みにくい結果になります。このように、関数の中に追加する情報のことを引数（ひきすう）と言います。引数によってさまざまな条件を変更することが可能になります。 library(tidyverse) # ↑は普通まず最初に読み込むパッケージですが、本書ではここで初めて使います library(janitor) read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% clean_names(case = &quot;old_janitor&quot;) ## # A tibble: 344 × 9 ## sｐｅｃｉｅｓ 種_類 x_島の名前 x_クチバシ_長さ_ｍｍ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # x_ｸﾁﾊﾞｼ_大きさ_ｍｍ &lt;dbl&gt;, 翼_長さ_mm &lt;dbl&gt;, ## # x_体重_単位はｇ &lt;dbl&gt;, x &lt;chr&gt;, ２００７_２００９ &lt;dbl&gt; さて、ここで使われている %&gt;% は非常に大事なので解説しておきます。 2.1.2.2 %&gt;% とは？ 「パイプ」と読みます。処理を重ねてコードに書いていきたい際に重宝し、現代のtidyverseを使ったRのコードに欠かせないものです。たとえば、データフレームdfのspecies列を選択する、という処理の select(df, species) は df %&gt;% select(species) と書けます。 %&gt;%の左側にあるものを右側の最初の部分（第1引数）に渡すという働きです。パイプの利点は、いくつもつないで書いていけることです。たとえば、ペンギンの種類別にクチバシの長さの平均値を出したいときには次のようにできます。 df %&gt;% group_by(species) %&gt;% summarise(平均値 = mean(bill_length_mm, na.rm = TRUE)) ## # A tibble: 3 × 2 ## species 平均値 ## &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie 38.8 ## 2 Chinstrap 48.8 ## 3 Gentoo 47.5 以下では%&gt;%を多用していきます。 なお、ショートカットctrl + shit + M（MacだとCmd + Shift + M）で出せます。 2.1.2.3 全角←→半角を自動で stringiパッケージのstri_trans_nfkc()関数を使って、変数名で全角-半角のばらつきを統一させます。 ここでは、変数名をリネームするのにdplyr 1.0.0で登場したrename_with()関数を使いました。everything()という引数を含めているので、すべての変数に対し、全角文字を含んでいたら半角に直すというコードになります。 library(stringi) read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% rename_with(~stri_trans_nfkc(.), everything()) ## # A tibble: 344 × 9 ## Species `種 類` `※島の名前` `1クチバシ 長さ…` `2クチバシ_大…` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 341 more rows, and 4 more variables: ## # `翼:長さ(mm)` &lt;dbl&gt;, `■体重 単位はg` &lt;dbl&gt;, 女男 &lt;chr&gt;, ## # `2007~2009` &lt;dbl&gt; 2.1.2.4 上記の合わせ技 %&gt;% でつなぎ合わせて1つの実行で合わせてしまうこともできます。 read_xlsx(&quot;data/ペンギン（ひどい列名）ver.xlsx&quot;) %&gt;% rename_with(~stri_trans_nfkc(.), everything()) %&gt;% clean_names(case = &quot;old_janitor&quot;) ## # A tibble: 344 × 9 ## species 種_類 x_島の名前 x1クチバシ_長さ_mm x2クチバシ_大き… ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 341 more rows, and 4 more variables: 翼_長さ_mm &lt;dbl&gt;, ## # x_体重_単位はg &lt;dbl&gt;, 女男 &lt;chr&gt;, x2007_2009 &lt;dbl&gt; 2.1.3 開始行を指定して読み込む 理想的なデータは1行目に列名が入力されている形ですが、最初の数行が空だったり、文字の説明が入っていたりすることも多いです。そうした場合は、以下のような読み込み結果になります。 read_xlsx(&quot;data/ペンギン（3行空き）.xlsx&quot;) %&gt;% select(1:3) # 紙面の都合のため最初の3列に制限 ## # A tibble: 346 × 3 ## ...1 ここに説明とか書いてあるファイル読むのつらいので… ...3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 species island bill… ## 3 Adelie Torgersen 39.1 ## # … with 343 more rows 列名が、セルに内容が入っている行から始まり、他の列名が...1, ...3といったものになりました。そしてデータがうまく読み込めていません。これを、指定した行から読み込むには、引数skip =にとばしたい行の数を指定します。 read_xlsx(&quot;data/ペンギン（3行空き）.xlsx&quot;, skip = 3) ## # A tibble: 344 × 9 ## species island bill_length_mm bill_depth_mm flipper_length_… ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie Torgersen 39.1 18.7 181 ## 2 Adelie Torgersen 39.5 17.4 186 ## 3 Adelie Torgersen 40.3 18 195 ## # … with 341 more rows, and 4 more variables: body_mass_g &lt;dbl&gt;, ## # sex &lt;chr&gt;, year &lt;dbl&gt;, 種類 &lt;chr&gt; このように、ちゃんと読む込むことができました。 2.1.4 セルを指定して読み込む 引数range =にセル範囲を指定すれば、そのセル範囲だけを読み込むこともできます。 read_xlsx(&quot;data/ペンギン.xlsx&quot;, range = &quot;A1:D5&quot;) ## # A tibble: 4 × 4 ## species 種類 island bill_length_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## 4 Adelie アデリー Torgersen NA 他にも、cell_cols =で読みたい列の指定、cell_rows =で読みたい行の指定も行えます。 詳細は、?readxlと打ち込んでヘルプを見るか、readxlのwebサイト 9を参照してください。 2.2 シートを指定して読み込む 2.2.1 シート名の確認 複雑なExcelファイルとなると、たくさんのシートが含まれていて、その全容を知るのも一苦労です。Rでは、readxlパッケージのexcel_sheets()関数でシート名の一覧を簡単に取得できます。 excel_sheets(&quot;data/ペンギン（シート別）.xlsx&quot;) ## [1] &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; 2.2.2 普通の読み込み シートが分かれているExcelファイルをそのまま読みこんでみます。 read_xlsx(&quot;data/ペンギン（シート別）.xlsx&quot;) ## # A tibble: 152 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 149 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; デフォルトでは一番最初のシートのデータが読みこまれます。ここでは、シート「アデリー」が読み込まれました。 2.2.3 シートを指定した読み込み 引数のsheet =にシート名を指定することで読み込めます。 read_excel(&quot;data/ペンギン（シート別）.xlsx&quot;, sheet = &quot;ジェンツー&quot; ) ## # A tibble: 124 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツー Biscoe 46.1 13.2 ## 2 Gentoo ジェンツー Biscoe 50 16.3 ## 3 Gentoo ジェンツー Biscoe 48.7 14.1 ## # … with 121 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; 2.2.4 すべてのシートから一気に読み込み 今まで身につけた知識を使うと、すべてのシートからデータを読みたいときは、単純に df_Adelie &lt;- read_excel(&quot;data/ペンギン（シート別）.xlsx&quot;, sheet = &quot;アデリー&quot; ) df_Gentoo &lt;- read_excel(&quot;data/ペンギン（シート別）.xlsx&quot;, sheet = &quot;ジェンツー&quot; ) df_Chinstrap &lt;- read_excel(&quot;data/ペンギン（シート別）.xlsx&quot;, sheet = &quot;ヒゲ&quot; ) と１つずつ読み込めばよいとわかります。しかし、これが100シート分あったら読むだけで多くの時間がかかり、うんざりしてしまうでしょう。また、疲労によりミスも起こるかもしれません。コードも長くて読みにくくなってしまいます。そんな時に便利で正確で短くコードが書ける素敵な方法があるのです。おそらくこれを知って使えるようになることが、初心者から中級者への第一歩になるのではないでしょうか。 ここで一気にレベルが上がりますが、これこそがRを使ってExcelファイルを読み込む便利な部分（その用途に限らず、コード書いてコンピュータに働いてもらうの最高！ってなる部分）なので、その魅力をみていきましょう。 path_name &lt;- &quot;data/ペンギン（シート別）.xlsx&quot; # データのパスを格納 # シート名を取得しそれぞれから読み込んでリストにまとめる df_list &lt;- excel_sheets(path_name) %&gt;% set_names() %&gt;% # 名前付きベクトルにする map(read_excel, path = path_name) df_list # 作成したリストの表示 ## $アデリー ## # A tibble: 152 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 149 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ジェンツー ## # A tibble: 124 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツー Biscoe 46.1 13.2 ## 2 Gentoo ジェンツー Biscoe 50 16.3 ## 3 Gentoo ジェンツー Biscoe 48.7 14.1 ## # … with 121 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ヒゲ ## # A tibble: 68 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chinstrap ヒゲ Dream 46.5 17.9 ## 2 Chinstrap ヒゲ Dream 50 19.5 ## 3 Chinstrap ヒゲ Dream 51.3 19.2 ## # … with 65 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; それぞれのExcelシートから読みこまれた3つのデータ（アデリー、ジェンツー、ヒゲ）はデータフレームとして、df_listにリストと呼ばれる形式にてまとめて格納されています。リストは最初は理解が難しいですが、慣れるとなんでもリストにしたくなるくらい便利なものです。リストの中身を個別に取り出してみてみましょう。 df_list$ジェンツー ## # A tibble: 124 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツー Biscoe 46.1 13.2 ## 2 Gentoo ジェンツー Biscoe 50 16.3 ## 3 Gentoo ジェンツー Biscoe 48.7 14.1 ## # … with 121 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; これは、df_listというリストの中の、ジェンツーという要素（ここではデータフレーム）を取り出す、というコードです。$が「（左側にくるオブジェクト）の中の」という意味を表しています。自分でコードを打つと、df_list$と打った時点で、中の要素の一覧が表示されるはずなので、そこからクリックして選ぶこともできます。 それでは、先ほど実行した読み込みコードの解説をします。 path_name &lt;- &quot;data/ペンギン（シート別）.xlsx&quot; これは、単にファイルの場所をpath_nameに格納しただけです。自分のデータで試してみたいときは、基本的にここのパス名を変えるだけで実行できるはずです。 df_list &lt;- excel_sheets(path_name) %&gt;% set_names() %&gt;% map(read_excel, path = path_name) excel_sheets()は上で実行したのと同じです。実行結果はベクトルとして保存されています。set_names()は、ベクトルを名前付きベクトルにする働きをします。なので、ここでできるのは、 excel_sheets(path_name) %&gt;% set_names() ## アデリー ジェンツー ヒゲ ## &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; です。 それぞれについてpurrrパッケージのmap()関数を使ってread_excel()を1つ1つのシート（ここでは作成した名前付きベクトルの要素）に適用していき、データを読み込みデータフレームにし、1つのリストにまとめるという作業をします。繰り返し似たような作業をするときに、このmap()関数が非常に便利です。 2.2.4.1 一つのデータフレームにする bind_rows()は、データフレームを縦に連結します。データフレームがリストになったものが引数にくると、それらをすべて縦につなげてくれます。引数.id =で、リストの要素名を変数の値として入れることができるので、どのデータフレームから来たのか識別することが可能になります。ここではgroupという名前にしています。 df_all &lt;- bind_rows(df_list, .id = &quot;group&quot;) 2.2.4.2 作成したデータフレームの確認 最初の3行と最後の3行だけを表示してどんなものができたか確認します。dplyrパッケージのslice_head(), slice_tail()関数を使って、引数n =に表示したい行数を指定することで、最初および最後の数行を取得できます。 # 最初の3行 df_all %&gt;% slice_head(n = 3) ## # A tibble: 3 × 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 アデリー Adelie アデリー Torgers… 39.1 18.7 ## 2 アデリー Adelie アデリー Torgers… 39.5 17.4 ## 3 アデリー Adelie アデリー Torgers… 40.3 18 ## # … with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; # 最後の3行 df_all %&gt;% slice_tail(n = 3) ## # A tibble: 3 × 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ヒゲ Chinstrap ヒゲ Dream 49.6 18.2 ## 2 ヒゲ Chinstrap ヒゲ Dream 50.8 19 ## 3 ヒゲ Chinstrap ヒゲ Dream 50.2 18.7 ## # … with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; 一気にやるにはslice()関数が便利です。1:3は1行目から3行目、(n()-2):n()は、列数（ただし現在のgroup内）を表すn()とそれから-2行した(n()-2)で表されています。 df_all %&gt;% slice(1:3, (n()-2):n()) ## # A tibble: 6 × 10 ## group species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 アデリー Adelie アデリー Torge… 39.1 18.7 ## 2 アデリー Adelie アデリー Torge… 39.5 17.4 ## 3 アデリー Adelie アデリー Torge… 40.3 18 ## 4 ヒゲ Chinstrap ヒゲ Dream 49.6 18.2 ## 5 ヒゲ Chinstrap ヒゲ Dream 50.8 19 ## 6 ヒゲ Chinstrap ヒゲ Dream 50.2 18.7 ## # … with 4 more variables: flipper_length_mm &lt;dbl&gt;, ## # body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, year &lt;dbl&gt; 2.3 複数のExcelファイルを読み込む それでは、さらにRの恩恵を深く実感できる部分に入ります。読みこみたいExcelファイルが大量にある場合です。これも実務上よく遭遇します。やり方としては、2.2.4で使った方法とほぼ同じです。 ただし、ここでは読み込むファイルの構造がすべて同様の場合に限ります。残念ながら、それがかなわない状況に、現実ではたくさん遭遇します。いつか本書の応用編を書くことがあったら、そちらで解説することとして、今回は構造が単純な場合に限って解説します。 おそらく、単純に思いつく方法は、 df_Adelie &lt;- read_xlsx(&quot;data/複数/アデリー.xlsx&quot;) df_Gentoo &lt;- read_xlsx(&quot;data/複数/ジェンツー.xlsx&quot;) df_Chinstrap &lt;- read_xlsx(&quot;data/複数/ヒゲ.xlsx&quot;) と1つずつ読んでいく方法ですが、これも大量にあったら泣きたくなる作業です。1つ1つファイル名を入力やコピペする間にいくらでもミスが生じます。2.1.1.1で紹介した自動補完を使っても、楽しいのは最初だけでしょう。そこで、ファイルを指定するところから極力人の手を介さず進めていく方法を次に解説していきます。 2.3.1 読み込むファイル名の一覧のオブジェクト作成 まず、読み込みたいファイルが格納されているフォルダのファイル名、およびパス名の一覧を取得します。 files &lt;- list.files(path = &quot;data/複数/&quot;, full.names = TRUE) files ## [1] &quot;data/複数/アデリー.xlsx&quot; &quot;data/複数/ジェンツー.xlsx&quot; ## [3] &quot;data/複数/ヒゲ.xlsx&quot; &quot;data/複数/フォルダ1&quot; ## [5] &quot;data/複数/フォルダ2&quot; &quot;data/複数/フォルダ3&quot; list.files()関数は、path =で指定したフォルダ内の情報を取得します。full.names = TRUEでパスも含めます。これをつけないと、ファイル名と拡張子だけの取得になります。 このうち、使用するのはxlsxファイルだけなので、文字列で該当するデータを取得するstr_subset()を用い、以下のように限定します。 files &lt;- files %&gt;% str_subset(&quot;xlsx&quot;) files ## [1] &quot;data/複数/アデリー.xlsx&quot; &quot;data/複数/ジェンツー.xlsx&quot; ## [3] &quot;data/複数/ヒゲ.xlsx&quot; 2.3.2 ファイルを一括で読み込む ldata &lt;- map(files, ~read_xlsx(.)) ldata ## [[1]] ## # A tibble: 152 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 149 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## [[2]] ## # A tibble: 124 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツー Biscoe 46.1 13.2 ## 2 Gentoo ジェンツー Biscoe 50 16.3 ## 3 Gentoo ジェンツー Biscoe 48.7 14.1 ## # … with 121 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## [[3]] ## # A tibble: 68 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chinstrap ヒゲ Dream 46.5 17.9 ## 2 Chinstrap ヒゲ Dream 50 19.5 ## 3 Chinstrap ヒゲ Dream 51.3 19.2 ## # … with 65 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ここでできたldataは、2.2.4で作成したdf_listと同じ構造です。違いはそれぞれのデータフレームの要素名（アデリー、ジェンツー、ヒゲ）が入っていない点です。各要素の上の部分にある名前が[[1]], [[3]], [[3]]と表示されています（つまり、1, 2, 3の数値が割り当てられている）。要素名が入っていないのは不便なので、以下で要素名を改めてつけます。 2.3.2.1 ファイル名抽出 先ほど作成したfilesから、ファイル名部分だけに加工します。str_replace()は、stringrパッケージの、文字の置換をする関数です。ここでは、拡張子とパス名をそれぞれ\"\"、つまり空白に置換しています。 file_name &lt;- str_replace(files, &quot;.xlsx&quot;, &quot;&quot;) %&gt;% str_replace(&quot;data/複数/&quot;, &quot;&quot;) file_name ## [1] &quot;アデリー&quot; &quot;ジェンツー&quot; &quot;ヒゲ&quot; 2.3.2.2 リストの要素名にファイル名を付与 2.2.4で使ったset_names()関数は、リストの要素名を付ける時にも使えます。リストldataの3つの要素に、file_nameの中身を割り当てます。 ldata &lt;- set_names(ldata, file_name) ldata ## $アデリー ## # A tibble: 152 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 18.7 ## 2 Adelie アデリー Torgersen 39.5 17.4 ## 3 Adelie アデリー Torgersen 40.3 18 ## # … with 149 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ジェンツー ## # A tibble: 124 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Gentoo ジェンツー Biscoe 46.1 13.2 ## 2 Gentoo ジェンツー Biscoe 50 16.3 ## 3 Gentoo ジェンツー Biscoe 48.7 14.1 ## # … with 121 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; ## ## $ヒゲ ## # A tibble: 68 × 9 ## species 種類 island bill_length_mm bill_depth_mm ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Chinstrap ヒゲ Dream 46.5 17.9 ## 2 Chinstrap ヒゲ Dream 50 19.5 ## 3 Chinstrap ヒゲ Dream 51.3 19.2 ## # … with 65 more rows, and 4 more variables: ## # flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;, ## # year &lt;dbl&gt; このように、ちゃんと要素に名前が付きました。これらを1つのデータフレームにまとめるには、 2.2.4.1と同じ手順でできます。 bind_rows(ldata, .id = &quot;group&quot;) 2.3.3 読み込むファイルが複数フォルダにある場合 data/複数フォルダの中に、さらにフォルダ1～フォルダ3がありました。この中にもそれぞれxlsxファイルが入っていて、それぞれ読み込みたいとします。その場合は、先ほど使ったlist.files()関数の引数、recursive = TRUEを追加します。これによって、フォルダの深い階層までもすべて読み込むことが可能になります。 files &lt;- list.files(path = &quot;data/複数/&quot;, full.names = TRUE, recursive = TRUE) files ## [1] &quot;data/複数//フォルダ1/アデリー.xlsx&quot; ## [2] &quot;data/複数//フォルダ2/ジェンツー.xlsx&quot; ## [3] &quot;data/複数//フォルダ3/ヒゲ.xlsx&quot; ## [4] &quot;data/複数/アデリー.xlsx&quot; ## [5] &quot;data/複数/ジェンツー.xlsx&quot; ## [6] &quot;data/複数/ヒゲ.xlsx&quot; このうち、使用するのはフォルダ1～3に入っているxlsxファイルだけなので、str_subset()関数で以下のように絞り込みます。ここの\"\"の中に入る文字列がどうなるかが難しいところかもしれませんが、ここは正規表現という本書の範囲を超える世界なので、深入りはしません。 files &lt;- files %&gt;% str_subset(&quot;フォルダ&quot;) あとは2.3.2と同じ手順で読み込めます。 以下、まだインストールしていないパッケージがあれば、install.packages(\"\")の\"\"中にパッケージ名を入れて実行するか、RStudioのPackagesタブのInstallからインストールしてください↩︎ Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/↩︎ ただし、R version 4.0で文字コード関連の挙動が変わったみたいで、R 4.0.2ではエラーになりました…（未解決）↩︎ https://readxl.tidyverse.org/↩︎ "],["writeexcel.html", "3 Excelファイルの保存 3.1 一つのExcelファイルを保存する 3.2 複数のファイルを一度に保存する", " 3 Excelファイルの保存 3.1 一つのExcelファイルを保存する writexlパッケージのwrite_xlsx()関数で、直接Excelファイルとして出力ができます。ここでは、新しく作成したデータフレームをExcelファイルとして保存してみます。 3.1.1 カテゴリ別平均値の作成 クチバシの長さと大きさを表す変数である、bill_length_mm、bill_depth_mmについて、平均値と欠損を抜いたn（ペンギン数）を種類別に計算します。group_by()でカテゴリ別にしたい変数を指定し、summarise()で平均値とnを計算するコードが以下になります。 df_group_mean &lt;- df %&gt;% group_by(種類) %&gt;% summarise(across( c(bill_length_mm, bill_depth_mm), # ここに変数 list(m = ~mean(., na.rm = TRUE), # 平均値計算 n = ~sum(!is.na(.)))) # 欠損のない人数計算 ) # ここは結果の整形部分 df_group_mean &lt;- df_group_mean %&gt;% select(-bill_depth_mm_n) %&gt;% # nが同じなので列削除 rename(n = bill_length_mm_n) # 列名をnにリネーム knitr::kable(df_group_mean) # きれいな出力にするコード 種類 bill_length_mm_m n bill_depth_mm_m アデリー 38.79139 151 18.34636 ジェンツー 47.50488 123 14.98211 ヒゲ 48.83382 68 18.42059 なお、ここでknitr::kable()という書き方が出てきますが、これはknitrパッケージのkable()関数という意味です。関数を1回しか使わない場合などにlibrary()で呼び出すのは無駄が多かったりするので、時々こういった記述が出てきます。 3.1.2 Excelファイルの保存 library(writexl) 前節で作成したカテゴリ別平均値のデータフレームdf_group_meanをExcelファイルとして保存します。保存はwrite_xlsx()関数の中に、データフレームのオブジェクトと出力先のパスと保存ファイル名を入れるだけです。 write_xlsx(df_group_mean, &quot;out/種類別平均値.xlsx&quot;) out/の部分が出力先のフォルダを示しています。 3.1.2.1 【応用】ファイル名に自動で本日の日付を入れる これはちょっと応用技ですが、便利なので紹介しておきます。lubridateパッケージのtoday()関数で、今日の日付を表示できるので、それを保存名を入れる時に組み込む（文字列なので区切ってstr_c()でくっつける）と、日付入りファイル名が作成できます。 write_xlsx(df_group_mean, str_c(&quot;out/df_group_mean&quot;, &quot;_&quot;, lubridate::today(), &quot;.xlsx&quot;)) 3.2 複数のファイルを一度に保存する これが活躍する場面としては、たとえばカテゴリ別（例：ペンギンの種類別、会社の部署別など）に集計した要約値をそのカテゴリ別に個々のExcelファイルにするといった状況が思いつきますので、それをやってみます。 3.2.1 データフレームをカテゴリ別に分割してリストにする split()関数を使うことで、カテゴリ別にデータフレームを分割し、リストにまとめた結果を作成できます。データは3.1.1で作成したdf_group_meanを使います。 分割に使う変数は、df_group_mean$speciesのように、データフレーム名の後に$をつけてその後に指定します。この変数の中身が、そのままリストの要素名になるので、後の処理がとても楽になります。 df_gmean_list &lt;- split(df_group_mean, df_group_mean$種類) df_gmean_list ## $アデリー ## # A tibble: 1 × 4 ## 種類 bill_length_mm_m n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 アデリー 38.8 151 18.3 ## ## $ジェンツー ## # A tibble: 1 × 4 ## 種類 bill_length_mm_m n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 ジェンツー 47.5 123 15.0 ## ## $ヒゲ ## # A tibble: 1 × 4 ## 種類 bill_length_mm_m n bill_depth_mm_m ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 ヒゲ 48.8 68 18.4 3.2.2 リストの各要素を個別でExcelファイルに保存する purrrパッケージのimap()関数を使って、リスト内の各データフレームに、それぞれの要素名をファイル名として、Excelファイルに出力します。 ここでは、リスト内の各要素を示すのが.x、要素名（位置）に当たるのは.yです。次々に代わるファイル名を作るのに、str_c()関数で文字列を結合しています。 imap(df_gmean_list, ~write_xlsx(.x, path = str_c(&quot;out/&quot;, .y , &quot;.xlsx&quot;))) 3.2.2.1 サンプルデータセット作成コード ちなみにdata/複数/フォルダにあるサンプルデータセットは以下のコードで作りました。 imap(df_list, ~write_xlsx(.x, path = str_c(&quot;data/複数/&quot;,.y , &quot;.xlsx&quot;))) 3.2.3 一つのファイルの複数シートに保存する 3.2.1で作成した、ペンギンの種類別クチバシの長さと大きさ平均値のデータを、個別のファイルでなく、一ファイルの複数シートに保存したいときは、とてもシンプルなコードで可能になります。 要素名のついたデータフレームのリストが作成されていれば、それを単純にwrite_xlsx()で出力するだけで完成します。 write_xlsx(df_gmean_list, &quot;data/平均値（複数シート）.xlsx&quot;) "],["readsavecsv.html", "4 csvファイルの読み込みと保存 4.1 一つのcsvファイルを読み込む 4.2 csvファイルの保存", " 4 csvファイルの読み込みと保存 windows環境で過ごしていて日本語を使うRユーザーにおいては、csvファイルを扱う際に文字コードの違いというつらみ（いわゆる文字化け）に遭遇することが少なくありません。 出会う可能性が高い文字コードには、大きくcp932（Shift-JIS）とUTF-8という形式があり、一般的に業務で読みこもうとするファイルは前者であることが多いことを知っておくと役に立ちます。 4.1 一つのcsvファイルを読み込む csvファイルを読みこむには、readrパッケージのread_csv()関数を使います。tidyverseを読み込んだら一緒に読み込まれます。readrでは基本的にutf8の読み書きが想定されています。RStudioのメニューで以下の部分をUTF-8に変えておかないと、色々つらい思いをします。 Tools &gt; Global Options &gt; Code &gt; Saving &gt; Default text encoding: Tools &gt; Project Options &gt; Code Editing &gt; text encoding: data &gt; csvフォルダ（ここでは&gt;は階層関係を示し、コードではdata/csv/で表現）に入っている「ペンギン（ひどい列名）ver_utf8.csv」を開きます。㊛㊚列のみ、環境依存文字のため、csvにする時点で文字化けています… 4.1.1 UTF-8でエンコードされたcsvファイル df_csv &lt;- read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;) df_csv ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `㊛㊚` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 4.1.2 Shift-JISでエンコードされたcsvファイル 正確にはShift-JISの拡張版であるcp932でエンコードされたファイルです。Windowsで作られた過去のcsvファイルはこの形式であることが多いです。 4.1.2.1 【エラー例】 以下コードを実行するとエラーが出てきます。 read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot;) Error in nchar(x, “width”) : invalid multibyte string, element 1 4.1.2.2 Shift-JISのcsvファイルの読み込み方 これを読むためには，引数locale = locale(encoding = )でShift-JISのファイルであることを指定する必要があります。 read_csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot; , locale = locale(encoding = &quot;cp932&quot;)) ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `??` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 4.1.3 read.csv()を使う場合 従来のcsvを読む関数read.csv()を使う場合も同様です。R-4.2からはデフォルトでUTF-8を読むようになったため，Shift-JISのファイルを読むためには引数で指定する必要があります。 read.csv(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot;, fileEncoding = &quot;cp932&quot;) %&gt;% as_tibble() # データフレームをtibble型にし見やすい出力に ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ 種.類 X.島の名前 X.クチバシ.長さ.ｍｍ. ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # X.ｸﾁﾊﾞｼ.大きさ.ｍｍ. &lt;dbl&gt;, 翼.長さ.mm. &lt;int&gt;, ## # X.体重.単位はｇ &lt;int&gt;, X.. &lt;chr&gt;, ２００７.２００９ &lt;int&gt; UTF-8を読む場合はデフォルトで読めます。 read.csv(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;) %&gt;% as_tibble() ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ 種.類 X.島の名前 X.クチバシ.長さ.ｍｍ. ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # X.ｸﾁﾊﾞｼ.大きさ.ｍｍ. &lt;dbl&gt;, 翼.長さ.mm. &lt;int&gt;, ## # X.体重.単位はｇ &lt;int&gt;, X.. &lt;chr&gt;, ２００７.２００９ &lt;int&gt; 4.1.4 大きいデータならfread() これまで紹介したcsvファイルを読みこむための関数は、小規模なデータならそんなに時間はかかりませんが、データが数万行×数百列と大きくなってくると、時間がかかるようになります。 そこで大きく時間を短縮できるのが、data.tableパッケージのfread()関数です。 UTF-8を読む場合はデフォルトで読めます。data.frame形式にするには引数にdata.table = FALSEをつけます data.table::fread(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;, data.table = FALSE) %&gt;% as_tibble() ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;int&gt;, ## # `■体重 単位はｇ` &lt;int&gt;, `㊛㊚` &lt;chr&gt;, ## # `２００７～２００９` &lt;int&gt; R4.2からは，Shift-JISのファイルを読むと日本語が文字化けするようになってしまいました。現在の所，これは対処不可能みたいです。 4.1.5 大きいデータを読む場合のvroom readrを速くしたようなパッケージにvroom[https://vroom.r-lib.org/]があります。しばらくは別々に開発が進むみたいですが，将来的に統合が考えられてるらしいです。shift-jisの大規模csvファイルを読む際のfreadに代わる選択肢として有望です vroom::vroom(&quot;data/csv/ペンギン（ひどい列名）ver_utf8.csv&quot;) ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `㊛㊚` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; Shift-JISのファイルはreadrと同じように引数で指定します vroom::vroom(&quot;data/csv/ペンギン（ひどい列名）ver_cp932.csv&quot;, locale = locale(encoding = &quot;cp932&quot;)) ## # A tibble: 344 × 9 ## Sｐｅｃｉｅｓ `種 類` `※島の名前` `①クチバシ 長さ（ｍｍ）` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adelie アデリー Torgersen 39.1 ## 2 Adelie アデリー Torgersen 39.5 ## 3 Adelie アデリー Torgersen 40.3 ## # … with 341 more rows, and 5 more variables: ## # `②ｸﾁﾊﾞｼ＿大きさ（ｍｍ）` &lt;dbl&gt;, `翼：長さ(mm)` &lt;dbl&gt;, ## # `■体重 単位はｇ` &lt;dbl&gt;, `??` &lt;chr&gt;, ## # `２００７～２００９` &lt;dbl&gt; 4.2 csvファイルの保存 csvファイルを保存するには、readrパッケージのwrite_csv()関数を使います。ただし、出力されたcsvファイルをExcelで開くとたぶん文字化けします。LibreOfficeのCalcであれば、最初にダイアログボックスが開いて読む文字コードを選べます。 4.2.1 write_csv()を使う 先ほど読みこんだdf_csvと、保存先を\"\"中に指定します。 write_csv(df_csv, &quot;out/df_csv_utf8.csv&quot;) 4.2.1.1 Excelで開いても読めるように Excelで開いても読める、BOM（byte order mark, バイトオーダーマーク）付きファイルとして出力する関数です。 write_excel_csv(df_csv, &quot;out/df_csv_utf8_forxl.csv&quot;) "],["dataanal.html", "5 データ解析に向けて 5.1 要約値や欠損データの確認 5.2 相関の確認", " 5 データ解析に向けて ここまでの解説で、Excelファイルとcsvファイルの読み込みについて一通り解説してきました。この段階では、まだデータがきれいでなくて、解析に入れないことも多いと思います。 5.1 要約値や欠損データの確認 まずどんなデータがどのように入っているか、欠損値（NA）はどれくらい発生しているか確認することは重要なプロセスです。変数の一覧を要約して確認することが簡単にできるskimパッケージのskimr()関数を使って確認してみましょう。データは2.1.1で読み込んだdfを使います。 library(skimr) # version 2.1.2 skim(df) Figure 5.1: skim()の出力 データの型が数値である変数（ここではVariable type:numeric）については、hist列に簡単なヒストグラムが表示されます（図5.1）。しかしデータが大量な場合、動作が遅くなります。その場合は、ヒストグラムを描かない以下の関数が使えます。 skim_without_charts(df) 5.1.1 結果をExcelファイルに出力する as_tibble()関数を使うことで、結果を一つのデータフレームにまとめることができます。 res_skim_df &lt;- skim(df) %&gt;% as_tibble() res_skim_df %&gt;% head() # 最初の6行を表示 ## # A tibble: 6 × 17 ## skim_type skim_variable n_missing complete_rate character.min ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 character species 0 1 6 ## 2 character 種類 0 1 2 ## 3 character island 0 1 5 ## 4 character sex 11 0.968 4 ## 5 numeric bill_length_mm 2 0.994 NA ## 6 numeric bill_depth_mm 2 0.994 NA ## # … with 12 more variables: character.max &lt;int&gt;, ## # character.empty &lt;int&gt;, character.n_unique &lt;int&gt;, ## # character.whitespace &lt;int&gt;, numeric.mean &lt;dbl&gt;, ## # numeric.sd &lt;dbl&gt;, numeric.p0 &lt;dbl&gt;, numeric.p25 &lt;dbl&gt;, ## # numeric.p50 &lt;dbl&gt;, numeric.p75 &lt;dbl&gt;, numeric.p100 &lt;dbl&gt;, ## # numeric.hist &lt;chr&gt; これで好きなように加工してExcelファイルとして出力することが可能になります。例えば、数値変数だけに絞る場合は res_skim_df %&gt;% filter(skim_type == &quot;numeric&quot;) %&gt;% select(skim_type, skim_variable, n_missing, numeric.mean, numeric.sd) ## # A tibble: 5 × 5 ## skim_type skim_variable n_missing numeric.mean numeric.sd ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 numeric bill_length_mm 2 43.9 5.46 ## 2 numeric bill_depth_mm 2 17.2 1.97 ## 3 numeric flipper_length_mm 2 201. 14.1 ## 4 numeric body_mass_g 2 4202. 802. ## 5 numeric year 0 2008. 0.818 また、group_by()を使ってグループ別に上記結果を出すことも可能です。 res_df_num_g &lt;- df %&gt;% group_by(種類) %&gt;% skim() %&gt;% as_tibble() %&gt;% filter(skim_type == &quot;numeric&quot;) %&gt;% select(skim_type, skim_variable, 種類, n_missing, numeric.mean, numeric.sd) res_df_num_g ## # A tibble: 15 × 6 ## skim_type skim_variable 種類 n_missing numeric.mean ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 numeric bill_length_mm アデリー 1 38.8 ## 2 numeric bill_length_mm ジェンツー 1 47.5 ## 3 numeric bill_length_mm ヒゲ 0 48.8 ## 4 numeric bill_depth_mm アデリー 1 18.3 ## 5 numeric bill_depth_mm ジェンツー 1 15.0 ## 6 numeric bill_depth_mm ヒゲ 0 18.4 ## 7 numeric flipper_length_mm アデリー 1 190. ## 8 numeric flipper_length_mm ジェンツー 1 217. ## 9 numeric flipper_length_mm ヒゲ 0 196. ## 10 numeric body_mass_g アデリー 1 3701. ## 11 numeric body_mass_g ジェンツー 1 5076. ## 12 numeric body_mass_g ヒゲ 0 3733. ## 13 numeric year アデリー 0 2008. ## 14 numeric year ジェンツー 0 2008. ## 15 numeric year ヒゲ 0 2008. ## # … with 1 more variable: numeric.sd &lt;dbl&gt; あとは、以下のように出力するだけです。 write_xlsx(res_df_num_g, &quot;out/種類別平均値（全数値型変数）.xlsx&quot;) 5.1.2 可視化 さらにggplot2を使って可視化することも可能になります。 res_df_num_g %&gt;% filter(skim_variable %in% c(&quot;bill_length_mm&quot;, &quot;bill_depth_mm&quot;, &quot;flipper_length_mm&quot;, &quot;body_mass_g&quot;)) %&gt;% ggplot(aes(x = 種類, y = numeric.mean, fill = 種類)) + geom_col() + theme(axis.text.x = element_text(size = 5)) + facet_wrap(vars(skim_variable), scale = &quot;free&quot;) ただし、ここの場合もっと潤沢な可視化グラフは元データから作成できます。例えば df %&gt;% select(種類, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g) %&gt;% pivot_longer(-種類, # wideデータからlongデータに変換 names_to = &quot;variables&quot;, values_to = &quot;scores&quot;) %&gt;% ggplot(aes(x = 種類, y = scores, fill = 種類)) + geom_boxplot(alpha = 0.3, width = 0.3) + # 箱ひげ図 geom_violin(alpha = 0.3) + # バイオリンプロット theme(axis.text.x = element_text(size = 5)) + facet_wrap(vars(variables), scales = &quot;free&quot;) 詳しくは特別付録のggplot2の辞書を参照ください。 5.2 相関の確認 変数同士の相関関係を見たいという要望はビジネス、アカデミックを問わず多く発生すると思います。簡単な相関行列の出し方やその可視化について解説します。ここで便利なパッケージがcorrrです。 5.2.1 相関行列を出す library(corrr) まずペンギンデータの中の数値変数だけにしぼります。そして、yearはここでは不要なので落とします。そうして作ったデータフレームcor_dfを、correlate()関数に入れるだけです。 cor_df &lt;- df %&gt;% select(where(is.numeric)) %&gt;% # 数値変数だけにしぼる select(-year) # 不要なので落とす correlate(cor_df) ## # A tibble: 4 × 5 ## term bill_length_mm bill_depth_mm flipper_length_… body_mass_g ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 bill… NA -0.235 0.656 0.595 ## 2 bill… -0.235 NA -0.584 -0.472 ## 3 flip… 0.656 -0.584 NA 0.871 ## 4 body… 0.595 -0.472 0.871 NA 上側と下型で相関係数が重複しているので、片側だけを残したい場合があります。その際はshave()関数で簡単に重複部分をなくせます。引数にupper = FALSEと入れれば、上側だけにすることもできます。 相関係数の表示したい桁の指定は、fashion()関数で、引数にdecimals =で桁数を指定することで可能になります。 cormat &lt;- correlate(cor_df) %&gt;% shave() %&gt;% fashion(decimals = 1) cormat ## term bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## 1 bill_length_mm ## 2 bill_depth_mm -.2 ## 3 flipper_length_mm .7 -.6 ## 4 body_mass_g .6 -.5 .9 あとは、以下のように出力するだけです。 write_xlsx(cormat, &quot;out/相関行列.xlsx&quot;) 5.2.2 相関行列の可視化 corrrパッケージの関数で相関行列の可視化も簡単にできます。 correlate(cor_df) %&gt;% rplot() "],["あとがき.html", "あとがき", " あとがき 初めての同人誌執筆が終わろうとしています。執筆に用いたBookdownについて前より理解が深まったと同時に、全然わからないことも増えました。。執筆途中で、メインで使っていたノートPCの充電ができなくなるというアクシデントにも見舞われました。こうした様々な学びを活かして、次回作につなげられればと思います。 本書の執筆にあたり、同人誌制作の先輩である天川榎@EnokiAmakawa氏から背中押し＆多くの助言をいただきました。この場を借りてお礼申し上げます。 この本の内容が、なるべく多くの方に届いて、みんなの仕事の効率化につながればうれしいです。そして、Rの可能性がさらに多くの方に認識され、Rを使ってお仕事できる環境が一層整っていくことを願ってやみません。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
